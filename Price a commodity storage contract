from datetime import date
from typing import List
from dateutil.relativedelta import relativedelta
import math

def validate_inputs(dates: List[date], prices: List[float]):
    if len(dates) != len(prices):
        raise ValueError("Dates and prices must have the same length.")
    if not all(isinstance(d, date) for d in dates):
        raise TypeError("All elements in dates must be of type 'date'.")
    if not all(p >= 0 for p in prices):
        raise ValueError("Prices must be non-negative.")

def calculate_storage_cost(start_date: date, end_date: date, storage_cost_rate: float) -> float:
    """Calculate the total storage cost based on the exact duration in months."""
    duration = relativedelta(end_date, start_date)
    months = duration.years * 12 + duration.months + (1 if duration.days > 0 else 0)
    return months * storage_cost_rate

def inject_gas(volume: float, rate: float, max_volume: float, price: float, injection_cost_rate: float) -> (float, float):
    """Handle gas injection and calculate the cost."""
    if volume + rate <= max_volume:
        injection_cost = rate * injection_cost_rate
        total_cost = rate * price + injection_cost
        return volume + rate, total_cost
    else:
        print("Injection not possible: insufficient storage space.")
        return volume, 0

def withdraw_gas(volume: float, rate: float, price: float, withdrawal_cost_rate: float) -> (float, float):
    """Handle gas withdrawal and calculate the revenue."""
    if volume >= rate:
        withdrawal_cost = rate * withdrawal_cost_rate
        total_revenue = rate * price - withdrawal_cost
        return volume - rate, total_revenue
    else:
        print("Withdrawal not possible: insufficient gas volume.")
        return volume, 0

def price_contract(in_dates: List[date], in_prices: List[float], out_dates: List[date], out_prices: List[float],
                   rate: float, storage_cost_rate: float, max_volume: float, injection_withdrawal_cost_rate: float) -> float:
    """Calculate the value of the gas storage contract."""
    validate_inputs(in_dates, in_prices)
    validate_inputs(out_dates, out_prices)

    # Combine and sort all dates
    schedule = {date: {"type": "inject", "price": price} for date, price in zip(in_dates, in_prices)}
    schedule.update({date: {"type": "withdraw", "price": price} for date, price in zip(out_dates, out_prices)})
    all_dates = sorted(schedule.keys())

    # Initialize variables
    volume = 0
    total_cost = 0
    total_revenue = 0

    # Process each date
    for current_date in all_dates:
        event = schedule[current_date]
        if event["type"] == "inject":
            volume, cost = inject_gas(volume, rate, max_volume, event["price"], injection_withdrawal_cost_rate)
            total_cost += cost
        elif event["type"] == "withdraw":
            volume, revenue = withdraw_gas(volume, rate, event["price"], injection_withdrawal_cost_rate)
            total_revenue += revenue

    # Calculate storage cost
    storage_cost = calculate_storage_cost(min(in_dates), max(out_dates), storage_cost_rate)

    # Calculate final contract value
    contract_value = total_revenue - total_cost - storage_cost
    return contract_value
